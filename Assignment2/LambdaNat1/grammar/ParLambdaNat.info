-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParLambdaNat.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pExp3 -> Exp3                               (3)
	%start_pExp -> Exp                                 (4)
	Id -> L_Id                                         (5)
	Program -> Exp                                     (6)
	Exp1 -> '\\' Id '.' Exp                            (7)
	Exp1 -> Exp2                                       (8)
	Exp2 -> Exp2 Exp3                                  (9)
	Exp2 -> Exp3                                       (10)
	Exp3 -> Id                                         (11)
	Exp3 -> '(' Exp ')'                                (12)
	Exp -> Exp1                                        (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'\\'           { PT _ (TS _ 4) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pExp3    rule  3
	%start_pExp     rule  4
	Id              rule  5
	Program         rule  6
	Exp1            rules 7, 8
	Exp2            rules 9, 10
	Exp3            rules 11, 12
	Exp             rule  13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 12
	'\\'           shift, and enter state 13
	L_Id           shift, and enter state 6

	Id             goto state 7
	Program        goto state 17
	Exp1           goto state 8
	Exp2           goto state 9
	Exp3           goto state 10
	Exp            goto state 18

State 1

	%start_pExp1 -> . Exp1                              (rule 1)

	'('            shift, and enter state 12
	'\\'           shift, and enter state 13
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp1           goto state 16
	Exp2           goto state 9
	Exp3           goto state 10

State 2

	%start_pExp2 -> . Exp2                              (rule 2)

	'('            shift, and enter state 12
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp2           goto state 15
	Exp3           goto state 10

State 3

	%start_pExp3 -> . Exp3                              (rule 3)

	'('            shift, and enter state 12
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp3           goto state 14

State 4

	%start_pExp -> . Exp                                (rule 4)

	'('            shift, and enter state 12
	'\\'           shift, and enter state 13
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp1           goto state 8
	Exp2           goto state 9
	Exp3           goto state 10
	Exp            goto state 11

State 5

	Id -> . L_Id                                        (rule 5)

	L_Id           shift, and enter state 6


State 6

	Id -> L_Id .                                        (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'.'            reduce using rule 5
	L_Id           reduce using rule 5
	%eof           reduce using rule 5


State 7

	Exp3 -> Id .                                        (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	L_Id           reduce using rule 11
	%eof           reduce using rule 11


State 8

	Exp -> Exp1 .                                       (rule 13)

	')'            reduce using rule 13
	%eof           reduce using rule 13


State 9

	Exp1 -> Exp2 .                                      (rule 8)
	Exp2 -> Exp2 . Exp3                                 (rule 9)

	'('            shift, and enter state 12
	')'            reduce using rule 8
	L_Id           shift, and enter state 6
	%eof           reduce using rule 8

	Id             goto state 7
	Exp3           goto state 19

State 10

	Exp2 -> Exp3 .                                      (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	L_Id           reduce using rule 10
	%eof           reduce using rule 10


State 11

	%start_pExp -> Exp .                                (rule 4)

	%eof           accept


State 12

	Exp3 -> '(' . Exp ')'                               (rule 12)

	'('            shift, and enter state 12
	'\\'           shift, and enter state 13
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp1           goto state 8
	Exp2           goto state 9
	Exp3           goto state 10
	Exp            goto state 21

State 13

	Exp1 -> '\\' . Id '.' Exp                           (rule 7)

	L_Id           shift, and enter state 6

	Id             goto state 20

State 14

	%start_pExp3 -> Exp3 .                              (rule 3)

	%eof           accept


State 15

	%start_pExp2 -> Exp2 .                              (rule 2)
	Exp2 -> Exp2 . Exp3                                 (rule 9)

	'('            shift, and enter state 12
	L_Id           shift, and enter state 6
	%eof           accept

	Id             goto state 7
	Exp3           goto state 19

State 16

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 17

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 18

	Program -> Exp .                                    (rule 6)

	%eof           reduce using rule 6


State 19

	Exp2 -> Exp2 Exp3 .                                 (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	L_Id           reduce using rule 9
	%eof           reduce using rule 9


State 20

	Exp1 -> '\\' Id . '.' Exp                           (rule 7)

	'.'            shift, and enter state 23


State 21

	Exp3 -> '(' Exp . ')'                               (rule 12)

	')'            shift, and enter state 22


State 22

	Exp3 -> '(' Exp ')' .                               (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	L_Id           reduce using rule 12
	%eof           reduce using rule 12


State 23

	Exp1 -> '\\' Id '.' . Exp                           (rule 7)

	'('            shift, and enter state 12
	'\\'           shift, and enter state 13
	L_Id           shift, and enter state 6

	Id             goto state 7
	Exp1           goto state 8
	Exp2           goto state 9
	Exp3           goto state 10
	Exp            goto state 24

State 24

	Exp1 -> '\\' Id '.' Exp .                           (rule 7)

	')'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 5
Number of non-terminals: 11
Number of states: 25
