let rec is_empty = \list.
    if list = # then 1 else 0
in
is_empty #

;;

let rec fib = \int.
    if int = 0
        then 0
    else
        if int = 1
            then 1
        else
            if int = 2
                then 1
                else 
                    (fib (int - 1) + (fib (int - 2)))
in
fib 6

;;

let rec length = \list.
    if list = #
        then 0
    else
        1 + (length (tl list))
in
length a:b:c:#

;;

let rec even = \list.
    if list = #
        then 1
    else
        if (tl list) = #
            then 0
        else even (tl (tl list))
in
even a:b:c:#

;;

let rec weave = \list. \list2.
    if list = #
        then list2
    else
        (hd list) : (weave (tl list) list2)
in
weave (0:1:4:#) (2:3:5:#)