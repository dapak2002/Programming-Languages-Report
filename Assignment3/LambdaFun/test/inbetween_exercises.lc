val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL"-> "tried to take the head of an empty list",
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

-- The implementation below of `inbetween` DOES NOT WORK.
-- The specification of `inbetween` was discussed in class. 
-- Briefly: `inbetween n left right` inserts `[n,right]` between `left` and `right`. 
-- Example: If list is 2->1->Null, and one inserts 7 inbetween 2 and 1, the result is 2->7->1->NULL.

-- The aim of this note is to explain a method of how to debug functions in LamFun.
-- `inbetween`  has two mistakes: One leads to a runtime error and the other to wrong output.

val inbetween = \n.\left.\right.
    let val between = new [] in
    between := [n,right]; -- between := cons n right
    tl(!left) := !between;
    left;;

-- If you are in the mood to explore, don't read further and test and debug the function for yourself.

----------
-- TESTING
----------

-- Setting up the environment for testing
-----------------------------------------

val a = new [];;
val b = new [];;
a :=  !(cons 1 nil);;
b :=  !(cons 2 a);;

-- REMARK: The 4 lines above, as well as what follows below could as well be entered via the REPL. In fact, this is what I did first. The REPL is great for quick experimenting. In particular, it allows you to inspect the state of the program at any time (via `:env`). However, if we want to rerun the same commands several times, it is more convenient to add them to the program. (Delete after debugging.)

-- EXERCISE 1: Draw the expected heap diagram after the execution of `inbetween 7 b a`.

-- EXERCISE 2: Run the function `inbetween 7 b a` in the REPL. What happens?

------------
-- DEBUGGING
------------

-- Initialise parameters and local variables
--------------------------------------------

-- Simulate a call to `inbetween 7 a b` step by step.

-- First, the parameters are instantiated as n = 7, left = b, right = a.
-- Second, the local variable `between` is declared.

val between = new [];; -- instead of putting this line in the program, one can also enter it in the REPL

-- Third, we start executing the body of the function.

between := [7,a];; -- replace `n` and `right` with their values `7` and `a`

-- EXERCISE 3:  Run in the REPL `tl(!b) := !between;;`. If you get the error message: `trying to access a non-address` find a replacement for `tl(!b) := !between;;` that does not cause this error. 

-- Before reading on, try to solve the exercise yourself.

-- My ANSWER: 
-- tl(b) := !between;;

-- EXERCISE 4: Uncomment the line above. Load this file again. Draw the heap diagram of the environment, which should include:

{-
a = <address 1>
b = <address 2>
between = <address 5>
0 -> "NULL"
1 -> [7, <address 1>]
2 -> [2, <address 1>]
5 -> [7, <address 1>]
-}

-- EXERCISE 5: Compare the heap diagram with the expected heap diagram from EXERCISE 1. 

-- EXERCISE 6: Continue debugging `inbetween`.

-- HINT: You can only change the content of pointers/addresses, you cannot change the addresses themselves.
-- For example, a data structure such as `[e,a]` is immutable and `a` cannot be replaced.
-- If you want to insert, for example, 7 between 2 and 1 in 2->1->nil the following should work 
--- create a new link 7->
--- make it point to 1->nil so that that you get 7->1->nil
--- then change the content of 2-> to 7->1->nil

