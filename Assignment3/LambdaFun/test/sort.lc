val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL" -> "tried to take the head of an empty list",  -- pattern match wtih "NULL", not with nil
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

-- Insert will place the element in the list respective of order
rec insert = \elem. \list.
     case !list of { 
        "NULL" -> cons elem nil, 
        [e,list'] -> case elem <= e of {
            true -> cons elem list,
            false -> cons (hd list) (insert elem (tl list))
        }
    } ;;

-- Sort is an insertion sort in which each element is removed from the list, then reinserted at the end to make a complete sorted list
rec sort = \list. 
    case !list of {
        "NULL" -> nil,
        [e,list'] -> insert e (sort list')
    } ;;

-- Length is a helper function for mergesort to evenly distribute elements into the odd and even lists
val length = \a. 
    let val ptr = new [] in
    let val i = new [] in
    i := 0;
    ptr := a;
    while !(!ptr) != "NULL" do
        case !(!ptr) of {
            [e,a'] -> 
                    i := !i + 1; 
                ptr := a'
        } ;
    !i;;

-- Merge is similar to weave in our last assignment. It will remove the head elements from list1 and list2, comparing them to create a new list in
    -- which the smallest element is placed first.
rec merge = \list. \list2. case !list2 of {
    "NULL" -> list,
    [e2,list2'] -> case !list of {
        "NULL" -> (merge (list2) nil),
        [e,list'] -> case e > e2 of {
            true -> cons e2 (merge list (list2')),
            false -> cons e (merge (list') list2)
        }
    }
} ;;

{- Merge sort separates the input list into two separate lists based on index number.
    These lists are named even and add while ptr is used to keep track of how many elements are left in the list.
    After separation, the smaller lists are merged into bigger ones maintaining order until the final result is a sorted list. -}
rec mergesort = \list.
    let val odds = new [] in
    let val evens = new [] in
    let val ptr = new [] in
    ptr := list;
    odds := nil;
    evens := nil;
    
    while !(!ptr) != "NULL" do
        case !(!ptr) of {
            [e,a'] ->
                    case (length !odds) <= (length !evens) of {
                        true -> 
                            odds := cons e !odds;
                        ptr := a',
                        false -> 
                            evens := cons e !evens;
                        ptr := a'
                    }
        } ;
    case !list of {
        "NULL" -> nil,
        [s,list'] -> case !list' of {
            "NULL" -> cons s nil,
            [x,list''] -> merge (mergesort !odds) (mergesort !evens)
        }
    } ;;

-- `print (cons 6 (cons 4 (cons 2 nil)))` outputs [6,4,2]
rec print = \list.
    case !list of {
        "NULL" -> [],
        _ -> (hd list):(print (tl list))
    } ;;

-- Testing insert: 
-- [1, 2, 3, 4, 5]
print (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil)))));;
-- [1, 2, 3, 4, 5]
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;


-- Testing insertion sort: 
-- [2, 4, 6]
print (sort (cons 6 (cons 4 (cons 2 nil))));;
-- [2, 3, 9, 14, 23, 24, 27]
print (sort (cons 14 ( cons 27 (cons 2 (cons 23 (cons 9 (cons 3 (cons 24 nil))))))));;

-- Testing merge: 
-- [1, 2, 3, 4, 5, 6]
print (merge (cons 2 (cons 3 (cons 5 nil))) (cons 1 (cons 4 (cons 6 nil))));;
-- [2, 3, 4, 5, 6, 7, 14]
print (merge (cons 2 (cons 5 (cons 6 (cons 14 nil)))) (cons 3 (cons 4( cons 7 nil))));;

-- Testing merge sort: 
-- [2, 3, 4, 7, 8, 9]
print (mergesort (cons 7 (cons 2 (cons 3 (cons 8 (cons 9 (cons 4 nil)))))));;
-- [2, 3, 9, 14, 23, 24, 27]
print (mergesort (cons 14 ( cons 27 (cons 2 (cons 23 (cons 9 (cons 3 (cons 24 nil))))))));;